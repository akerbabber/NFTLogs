/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace BlurSwap {
  export type OpenseaTradesStruct = {
    value: PromiseOrValue<BigNumberish>;
    tradeData: PromiseOrValue<BytesLike>;
  };

  export type OpenseaTradesStructOutput = [BigNumber, string] & {
    value: BigNumber;
    tradeData: string;
  };

  export type ERC20DetailsStruct = {
    tokenAddrs: PromiseOrValue<string>[];
    amounts: PromiseOrValue<BigNumberish>[];
  };

  export type ERC20DetailsStructOutput = [string[], BigNumber[]] & {
    tokenAddrs: string[];
    amounts: BigNumber[];
  };

  export type ConverstionDetailsStruct = {
    conversionData: PromiseOrValue<BytesLike>;
  };

  export type ConverstionDetailsStructOutput = [string] & {
    conversionData: string;
  };

  export type ERC1155DetailsStruct = {
    tokenAddr: PromiseOrValue<string>;
    ids: PromiseOrValue<BigNumberish>[];
    amounts: PromiseOrValue<BigNumberish>[];
  };

  export type ERC1155DetailsStructOutput = [
    string,
    BigNumber[],
    BigNumber[]
  ] & { tokenAddr: string; ids: BigNumber[]; amounts: BigNumber[] };
}

export declare namespace MarketRegistry {
  export type TradeDetailsStruct = {
    marketId: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    tradeData: PromiseOrValue<BytesLike>;
  };

  export type TradeDetailsStructOutput = [BigNumber, BigNumber, string] & {
    marketId: BigNumber;
    value: BigNumber;
    tradeData: string;
  };
}

export declare namespace SpecialTransferHelper {
  export type ERC721DetailsStruct = {
    tokenAddr: PromiseOrValue<string>;
    to: PromiseOrValue<string>[];
    ids: PromiseOrValue<BigNumberish>[];
  };

  export type ERC721DetailsStructOutput = [string, string[], BigNumber[]] & {
    tokenAddr: string;
    to: string[];
    ids: BigNumber[];
  };
}

export interface BlurSwapInterface extends utils.Interface {
  functions: {
    "GOV()": FunctionFragment;
    "addAffiliate(address)": FunctionFragment;
    "addSponsoredMarket(uint256)": FunctionFragment;
    "affiliates(uint256)": FunctionFragment;
    "baseFees()": FunctionFragment;
    "batchBuyFromOpenSea((uint256,bytes)[])": FunctionFragment;
    "batchBuyWithERC20s((address[],uint256[]),(uint256,uint256,bytes)[],(bytes)[],address[])": FunctionFragment;
    "batchBuyWithETH((uint256,uint256,bytes)[])": FunctionFragment;
    "closeAllTrades()": FunctionFragment;
    "converter()": FunctionFragment;
    "guardian()": FunctionFragment;
    "marketRegistry()": FunctionFragment;
    "multiAssetSwap((address[],uint256[]),(address,address[],uint256[])[],(address,uint256[],uint256[])[],(bytes)[],(uint256,uint256,bytes)[],address[],uint256[2])": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,uint256,bytes)": FunctionFragment;
    "openForFreeTrades()": FunctionFragment;
    "openForTrades()": FunctionFragment;
    "owner()": FunctionFragment;
    "punkProxy()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueERC1155(address,uint256[],uint256[],address)": FunctionFragment;
    "rescueERC20(address,address)": FunctionFragment;
    "rescueERC721(address,uint256[],address)": FunctionFragment;
    "rescueETH(address)": FunctionFragment;
    "setBaseFees(uint256)": FunctionFragment;
    "setConverter(address)": FunctionFragment;
    "setMarketRegistry(address)": FunctionFragment;
    "setOneTimeApproval(address,address,uint256)": FunctionFragment;
    "setOpenForFreeTrades(bool)": FunctionFragment;
    "setOpenForTrades(bool)": FunctionFragment;
    "setUp()": FunctionFragment;
    "sponsoredMarkets(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAffiliate(uint256,address,bool)": FunctionFragment;
    "updateGuardian(address)": FunctionFragment;
    "updateSponsoredMarket(uint256,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GOV"
      | "addAffiliate"
      | "addSponsoredMarket"
      | "affiliates"
      | "baseFees"
      | "batchBuyFromOpenSea"
      | "batchBuyWithERC20s"
      | "batchBuyWithETH"
      | "closeAllTrades"
      | "converter"
      | "guardian"
      | "marketRegistry"
      | "multiAssetSwap"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received(address,address,uint256,bytes)"
      | "onERC721Received(address,uint256,bytes)"
      | "openForFreeTrades"
      | "openForTrades"
      | "owner"
      | "punkProxy"
      | "renounceOwnership"
      | "rescueERC1155"
      | "rescueERC20"
      | "rescueERC721"
      | "rescueETH"
      | "setBaseFees"
      | "setConverter"
      | "setMarketRegistry"
      | "setOneTimeApproval"
      | "setOpenForFreeTrades"
      | "setOpenForTrades"
      | "setUp"
      | "sponsoredMarkets"
      | "supportsInterface"
      | "transferOwnership"
      | "updateAffiliate"
      | "updateGuardian"
      | "updateSponsoredMarket"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "GOV", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAffiliate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSponsoredMarket",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "affiliates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "baseFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchBuyFromOpenSea",
    values: [BlurSwap.OpenseaTradesStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBuyWithERC20s",
    values: [
      BlurSwap.ERC20DetailsStruct,
      MarketRegistry.TradeDetailsStruct[],
      BlurSwap.ConverstionDetailsStruct[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBuyWithETH",
    values: [MarketRegistry.TradeDetailsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAllTrades",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "converter", values?: undefined): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiAssetSwap",
    values: [
      BlurSwap.ERC20DetailsStruct,
      SpecialTransferHelper.ERC721DetailsStruct[],
      BlurSwap.ERC1155DetailsStruct[],
      BlurSwap.ConverstionDetailsStruct[],
      MarketRegistry.TradeDetailsStruct[],
      PromiseOrValue<string>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received(address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openForFreeTrades",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openForTrades",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "punkProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueERC1155",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueETH",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConverter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOneTimeApproval",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenForFreeTrades",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenForTrades",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sponsoredMarkets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAffiliate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGuardian",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSponsoredMarket",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "GOV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSponsoredMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "affiliates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchBuyFromOpenSea",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBuyWithERC20s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBuyWithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAllTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "converter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiAssetSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received(address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openForFreeTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openForTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "punkProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescueETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConverter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOneTimeApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenForFreeTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenForTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sponsoredMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSponsoredMarket",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BlurSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlurSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GOV(overrides?: CallOverrides): Promise<[string]>;

    addAffiliate(
      _affiliate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSponsoredMarket(
      _marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    affiliates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { affiliate: string; isActive: boolean }>;

    baseFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchBuyFromOpenSea(
      openseaTrades: BlurSwap.OpenseaTradesStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchBuyWithERC20s(
      erc20Details: BlurSwap.ERC20DetailsStruct,
      tradeDetails: MarketRegistry.TradeDetailsStruct[],
      converstionDetails: BlurSwap.ConverstionDetailsStruct[],
      dustTokens: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchBuyWithETH(
      tradeDetails: MarketRegistry.TradeDetailsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeAllTrades(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    converter(overrides?: CallOverrides): Promise<[string]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    marketRegistry(overrides?: CallOverrides): Promise<[string]>;

    multiAssetSwap(
      erc20Details: BlurSwap.ERC20DetailsStruct,
      erc721Details: SpecialTransferHelper.ERC721DetailsStruct[],
      erc1155Details: BlurSwap.ERC1155DetailsStruct[],
      converstionDetails: BlurSwap.ConverstionDetailsStruct[],
      tradeDetails: MarketRegistry.TradeDetailsStruct[],
      dustTokens: PromiseOrValue<string>[],
      feeDetails: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "onERC721Received(address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openForFreeTrades(overrides?: CallOverrides): Promise<[boolean]>;

    openForTrades(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    punkProxy(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueERC1155(
      asset: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueERC20(
      asset: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueERC721(
      asset: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueETH(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseFees(
      _baseFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConverter(
      _converter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketRegistry(
      _marketRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOneTimeApproval(
      token: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOpenForFreeTrades(
      _openForFreeTrades: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOpenForTrades(
      _openForTrades: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sponsoredMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { marketId: BigNumber; isActive: boolean }
    >;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAffiliate(
      _affiliateIndex: PromiseOrValue<BigNumberish>,
      _affiliate: PromiseOrValue<string>,
      _IsActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSponsoredMarket(
      _marketIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  GOV(overrides?: CallOverrides): Promise<string>;

  addAffiliate(
    _affiliate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSponsoredMarket(
    _marketId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  affiliates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { affiliate: string; isActive: boolean }>;

  baseFees(overrides?: CallOverrides): Promise<BigNumber>;

  batchBuyFromOpenSea(
    openseaTrades: BlurSwap.OpenseaTradesStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchBuyWithERC20s(
    erc20Details: BlurSwap.ERC20DetailsStruct,
    tradeDetails: MarketRegistry.TradeDetailsStruct[],
    converstionDetails: BlurSwap.ConverstionDetailsStruct[],
    dustTokens: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchBuyWithETH(
    tradeDetails: MarketRegistry.TradeDetailsStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeAllTrades(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  converter(overrides?: CallOverrides): Promise<string>;

  guardian(overrides?: CallOverrides): Promise<string>;

  marketRegistry(overrides?: CallOverrides): Promise<string>;

  multiAssetSwap(
    erc20Details: BlurSwap.ERC20DetailsStruct,
    erc721Details: SpecialTransferHelper.ERC721DetailsStruct[],
    erc1155Details: BlurSwap.ERC1155DetailsStruct[],
    converstionDetails: BlurSwap.ConverstionDetailsStruct[],
    tradeDetails: MarketRegistry.TradeDetailsStruct[],
    dustTokens: PromiseOrValue<string>[],
    feeDetails: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "onERC721Received(address,uint256,bytes)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openForFreeTrades(overrides?: CallOverrides): Promise<boolean>;

  openForTrades(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  punkProxy(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueERC1155(
    asset: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueERC20(
    asset: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueERC721(
    asset: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueETH(
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseFees(
    _baseFees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConverter(
    _converter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketRegistry(
    _marketRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOneTimeApproval(
    token: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOpenForFreeTrades(
    _openForFreeTrades: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOpenForTrades(
    _openForTrades: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sponsoredMarkets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { marketId: BigNumber; isActive: boolean }>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAffiliate(
    _affiliateIndex: PromiseOrValue<BigNumberish>,
    _affiliate: PromiseOrValue<string>,
    _IsActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateGuardian(
    _guardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSponsoredMarket(
    _marketIndex: PromiseOrValue<BigNumberish>,
    _marketId: PromiseOrValue<BigNumberish>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    GOV(overrides?: CallOverrides): Promise<string>;

    addAffiliate(
      _affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSponsoredMarket(
      _marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    affiliates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { affiliate: string; isActive: boolean }>;

    baseFees(overrides?: CallOverrides): Promise<BigNumber>;

    batchBuyFromOpenSea(
      openseaTrades: BlurSwap.OpenseaTradesStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchBuyWithERC20s(
      erc20Details: BlurSwap.ERC20DetailsStruct,
      tradeDetails: MarketRegistry.TradeDetailsStruct[],
      converstionDetails: BlurSwap.ConverstionDetailsStruct[],
      dustTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchBuyWithETH(
      tradeDetails: MarketRegistry.TradeDetailsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    closeAllTrades(overrides?: CallOverrides): Promise<void>;

    converter(overrides?: CallOverrides): Promise<string>;

    guardian(overrides?: CallOverrides): Promise<string>;

    marketRegistry(overrides?: CallOverrides): Promise<string>;

    multiAssetSwap(
      erc20Details: BlurSwap.ERC20DetailsStruct,
      erc721Details: SpecialTransferHelper.ERC721DetailsStruct[],
      erc1155Details: BlurSwap.ERC1155DetailsStruct[],
      converstionDetails: BlurSwap.ConverstionDetailsStruct[],
      tradeDetails: MarketRegistry.TradeDetailsStruct[],
      dustTokens: PromiseOrValue<string>[],
      feeDetails: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    openForFreeTrades(overrides?: CallOverrides): Promise<boolean>;

    openForTrades(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    punkProxy(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueERC1155(
      asset: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rescueERC20(
      asset: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rescueERC721(
      asset: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rescueETH(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseFees(
      _baseFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConverter(
      _converter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketRegistry(
      _marketRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOneTimeApproval(
      token: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpenForFreeTrades(
      _openForFreeTrades: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpenForTrades(
      _openForTrades: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(overrides?: CallOverrides): Promise<void>;

    sponsoredMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { marketId: BigNumber; isActive: boolean }
    >;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAffiliate(
      _affiliateIndex: PromiseOrValue<BigNumberish>,
      _affiliate: PromiseOrValue<string>,
      _IsActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSponsoredMarket(
      _marketIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    GOV(overrides?: CallOverrides): Promise<BigNumber>;

    addAffiliate(
      _affiliate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSponsoredMarket(
      _marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    affiliates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseFees(overrides?: CallOverrides): Promise<BigNumber>;

    batchBuyFromOpenSea(
      openseaTrades: BlurSwap.OpenseaTradesStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchBuyWithERC20s(
      erc20Details: BlurSwap.ERC20DetailsStruct,
      tradeDetails: MarketRegistry.TradeDetailsStruct[],
      converstionDetails: BlurSwap.ConverstionDetailsStruct[],
      dustTokens: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchBuyWithETH(
      tradeDetails: MarketRegistry.TradeDetailsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeAllTrades(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    converter(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    marketRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    multiAssetSwap(
      erc20Details: BlurSwap.ERC20DetailsStruct,
      erc721Details: SpecialTransferHelper.ERC721DetailsStruct[],
      erc1155Details: BlurSwap.ERC1155DetailsStruct[],
      converstionDetails: BlurSwap.ConverstionDetailsStruct[],
      tradeDetails: MarketRegistry.TradeDetailsStruct[],
      dustTokens: PromiseOrValue<string>[],
      feeDetails: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "onERC721Received(address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openForFreeTrades(overrides?: CallOverrides): Promise<BigNumber>;

    openForTrades(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    punkProxy(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueERC1155(
      asset: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueERC20(
      asset: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueERC721(
      asset: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueETH(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseFees(
      _baseFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConverter(
      _converter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketRegistry(
      _marketRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOneTimeApproval(
      token: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOpenForFreeTrades(
      _openForFreeTrades: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOpenForTrades(
      _openForTrades: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sponsoredMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAffiliate(
      _affiliateIndex: PromiseOrValue<BigNumberish>,
      _affiliate: PromiseOrValue<string>,
      _IsActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSponsoredMarket(
      _marketIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GOV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAffiliate(
      _affiliate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSponsoredMarket(
      _marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    affiliates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchBuyFromOpenSea(
      openseaTrades: BlurSwap.OpenseaTradesStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchBuyWithERC20s(
      erc20Details: BlurSwap.ERC20DetailsStruct,
      tradeDetails: MarketRegistry.TradeDetailsStruct[],
      converstionDetails: BlurSwap.ConverstionDetailsStruct[],
      dustTokens: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchBuyWithETH(
      tradeDetails: MarketRegistry.TradeDetailsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeAllTrades(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    converter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiAssetSwap(
      erc20Details: BlurSwap.ERC20DetailsStruct,
      erc721Details: SpecialTransferHelper.ERC721DetailsStruct[],
      erc1155Details: BlurSwap.ERC1155DetailsStruct[],
      converstionDetails: BlurSwap.ConverstionDetailsStruct[],
      tradeDetails: MarketRegistry.TradeDetailsStruct[],
      dustTokens: PromiseOrValue<string>[],
      feeDetails: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openForFreeTrades(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openForTrades(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    punkProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueERC1155(
      asset: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueERC20(
      asset: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueERC721(
      asset: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueETH(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseFees(
      _baseFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConverter(
      _converter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketRegistry(
      _marketRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOneTimeApproval(
      token: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOpenForFreeTrades(
      _openForFreeTrades: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOpenForTrades(
      _openForTrades: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sponsoredMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAffiliate(
      _affiliateIndex: PromiseOrValue<BigNumberish>,
      _affiliate: PromiseOrValue<string>,
      _IsActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSponsoredMarket(
      _marketIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
